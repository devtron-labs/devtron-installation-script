operatorSecret = kubectl get secret -n devtroncd devtron-operator-secret;
operatorConfigMap = kubectl get cm -n devtroncd devtron-operator-cm;
postgresqlPassword = jsonSelect(operatorSecret, "data.POSTGRESQL_PASSWORD");
acdPassword = jsonSelect(operatorSecret, "data.ACD_PASSWORD");
gitToken = jsonSelect(operatorSecret, "data.GIT_TOKEN");
webHookToken = jsonSelect(operatorSecret, "data.WEBHOOK_TOKEN");

baseURL = jsonSelect(operatorConfigMap, "data.BASE_URL");
dexConfig = jsonSelect(operatorConfigMap, "data.DEX_CONFIG");
gitlabNamespaceId = jsonSelect(operatorConfigMap, "data.GITLAB_NAMESPACE_ID");
gitlabNamespaceName = jsonSelect(operatorConfigMap, "data.GITLAB_NAMESPACE_NAME");
gitUserName = jsonSelect(operatorConfigMap, "data.GIT_USERNAME");
githubOrganization = jsonSelect(operatorConfigMap, "data.GITHUB_ORGANIZATION");
gitProvider = jsonSelect(operatorConfigMap, "data.GIT_PROVIDER");
defaultCDLogsBucketRegion = jsonSelect(operatorConfigMap, "data.DEFAULT_CD_LOGS_BUCKET_REGION");
defaultCacheBucket = jsonSelect(operatorConfigMap, "data.DEFAULT_CACHE_BUCKET");
defaultCacheBucketRegion = jsonSelect(operatorConfigMap, "data.DEFAULT_CACHE_BUCKET_REGION");
defaultBuildLogsBucket = jsonSelect(operatorConfigMap, "data.DEFAULT_BUILD_LOGS_BUCKET");

passwordGen = `#!/bin/bash
openssl rand -base64 20`;

if !postgresqlPassword {
	log("postgresql password is mandatory");
}
if !baseURL {
	log("baseURL is mandatory");
}
if !gitToken {
	log("gitToken is mandatory");
}
argocd = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/argocd.yaml");
chartmuseum = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/chartmuseum.yaml");
clair = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/clair.yaml");
dashboard = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/dashboard.yaml");
gitSensor = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/gitsensor.yaml");
guard = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/guard.yaml");
postgresql = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/postgresql.yaml");
imageScanner = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/image-scanner.yaml");
kubewatch = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/kubewatch.yaml");
lens = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/lens.yaml");
migrator = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/migrator.yaml");
natsOperator = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/nats-operator.yaml");
natsServer = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/nats-server.yaml");
natsStreaming = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/nats-streaming.yaml");
notifier = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/notifier.yaml");
devtron = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/devtron.yaml");
devtronDexIngress = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/devtron-dex-ingress.yaml");
workflow = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/workflow.yaml");
prometheusOperator = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/prometheus-operator.yaml");
namespace = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/namespace.yaml");

#prometheus operator
namespaces = kubectl apply namespace;
#prometheusoperator = kubectl apply -n monitoring prometheusOperator;

#postgresql
# if postgres already installed skip installation
hasPostgresql = kubectl get sts postgresql-postgresql -n devtroncd;
if !hasPostgresql {
	postgresqlOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/postgresql.yaml");
	yamlEdit(postgresql, "data.postgresql-password", postgresqlPassword, 0);
	postgresql = kubectl apply -n devtroncd postgresql -u postgresqlOverride;
}
#argocd
hasArgocd = kubectl get deployment argocd-server -n devtroncd;
argocdOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/argocd.yaml");
#if argocd present then dont patch
if !hasArgocd {
  yamlEdit(argocd, "data.url", baseURL, 15);
  yamlEdit(argocd, `data.dex\.config`, dexConfig, 15);
  yamlEdit(argocd, `subjects.0.namespace`, "devtroncd", 14);
  yamlEdit(argocd, `subjects.0.namespace`, "devtroncd", 13);
  # patchLoad = '{"data":{"url":"' + baseURL + '", "dex.config:"' + dexConfig + '}}';
  # pa = kubectl patch -n devtroncd cm/argocd-cm --type "application/merge-patch+json" -p patchLoad;
}
argocd = kubectl apply -n devtroncd argocd -u argocdOverride;