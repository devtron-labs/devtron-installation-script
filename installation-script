operatorSecret = kubectl get secret -n devtroncd devtron-operator-secret;
operatorConfigMap = kubectl get cm -n devtroncd devtron-operator-cm;
postgresqlPassword = jsonSelect(operatorSecret, "data.POSTGRESQL_PASSWORD");
acdPassword = jsonSelect(operatorSecret, "data.ACD_PASSWORD");
gitToken = jsonSelect(operatorSecret, "data.GIT_TOKEN");
webHookToken = jsonSelect(operatorSecret, "data.WEBHOOK_TOKEN");

baseURL = jsonSelect(operatorConfigMap, "data.BASE_URL");
dexConfig = jsonSelect(operatorConfigMap, "data.DEX_CONFIG");
gitlabNamespaceId = jsonSelect(operatorConfigMap, "data.GITLAB_NAMESPACE_ID");
gitlabNamespaceName = jsonSelect(operatorConfigMap, "data.GITLAB_NAMESPACE_NAME");
gitUserName = jsonSelect(operatorConfigMap, "data.GIT_USERNAME");
githubOrganization = jsonSelect(operatorConfigMap, "data.GITHUB_ORGANIZATION");
gitProvider = jsonSelect(operatorConfigMap, "data.GIT_PROVIDER");
defaultCDLogsBucketRegion = jsonSelect(operatorConfigMap, "data.DEFAULT_CD_LOGS_BUCKET_REGION");
defaultCacheBucket = jsonSelect(operatorConfigMap, "data.DEFAULT_CACHE_BUCKET");
defaultCacheBucketRegion = jsonSelect(operatorConfigMap, "data.DEFAULT_CACHE_BUCKET_REGION");
defaultBuildLogsBucket = jsonSelect(operatorConfigMap, "data.DEFAULT_BUILD_LOGS_BUCKET");
chartmuseumStorageAmazonBucket = jsonSelect(operatorConfigMap, "data.CHARTMUSEUM_STORAGE_AMAZON_BUCKET");
chartmuseumStorateAmazonRegion = jsonSelect(operatorConfigMap, "data.CHARTMUSEUM_STORAGE_AMAZON_REGION");


passwordGen = `#!/bin/bash
openssl rand -base64 20 | base64`;

base64EncoderPrefix = `#!/bin/bash 
`;
base64EncoderSuffix = ` | base64 | tr -d ':\n'`;

base64DecoderPrefix = `#!/bin/bash 
`;
base64DecoderSuffix = ` | base64 -d | tr -d ':\n'`;

if !postgresqlPassword {
	log("postgresql password is mandatory");
}
if !baseURL {
	log("baseURL is mandatory");
}
if !gitToken {
	log("gitToken is mandatory");
}
argocd = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/argocd.yaml");
chartmuseum = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/chartmuseum.yaml");
clair = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/clair.yaml");
clairConfig = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/clair-config.yaml");
dashboard = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/dashboard.yaml");
gitSensor = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/gitsensor.yaml");
guard = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/guard.yaml");
postgresql = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/postgresql.yaml");
imageScanner = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/image-scanner.yaml");
kubewatch = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/kubewatch.yaml");
lens = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/lens.yaml");
migrator = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/migrator.yaml");
natsOperator = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/nats-operator.yaml");
natsServer = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/nats-server.yaml");
natsStreaming = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/nats-streaming.yaml");
notifier = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/notifier.yaml");
devtron = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/devtron.yaml");
devtronDexIngress = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/devtron-dex-ingress.yaml");
workflow = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/workflow.yaml");
serviceAccount = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/serviceaccount.yaml");
prometheusOperator = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/prometheus-operator.yaml");
namespace = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/yamls/namespace.yaml");


namespaces = kubectl apply namespace;
sa = kubectl apply serviceAccount;

#prometheus operator
#prometheusoperator = kubectl apply -n monitoring prometheusOperator;

#postgresql
# if postgres already installed skip installation
hasPostgresql = kubectl get sts postgresql-postgresql -n devtroncd;
if !hasPostgresql {
	postgresqlOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/postgresql.yaml");
	yamlEdit(postgresql, "data.postgresql-password", postgresqlPassword, 0);
	postgresql = kubectl apply -n devtroncd postgresql -u postgresqlOverride;
}
#argocd
hasArgocd = kubectl get deployment argocd-server -n devtroncd;
argocdOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/argocd.yaml");
#if argocd present then dont patch
if hasArgocd {
	argocdCM = kubectl get cm argocd-cm -n devtroncd;
	tbaseURL = jsonSelect(argocdCM, "data.url");
	if tbaseURL {
		tbaseURL = baseURL;
	}
	tdexConfig = jsonSelect(argocdCM, `data.dex\.config`);
	if tdexConfig {
		dexConfig = tdexConfig;
	}
}

if !hasArgocd {
  yamlEdit(argocd, "data.url", baseURL, 15);
  yamlEdit(argocd, `data.dex\.config`, dexConfig, 15);
  # patchLoad = '{"data":{"url":"' + baseURL + '", "dex.config:"' + dexConfig + '}}';
  # pa = kubectl patch -n devtroncd cm/argocd-cm --type "application/merge-patch+json" -p patchLoad;
}
yamlEdit(argocd, `subjects.0.namespace`, "devtroncd", 14);
yamlEdit(argocd, `subjects.0.namespace`, "devtroncd", 13);
argocd = kubectl apply -n devtroncd argocd -u argocdOverride;
patchLoad = '{"data":{"url":"' + baseURL + '", "dex.config:"' + dexConfig + '}}';
pa = kubectl patch -n devtroncd cm/argocd-cm --type "application/merge-patch+json" -p patchLoad;


#git-sensor
yamlEdit(gitSensor, "data.PG_PASSWORD", postgresqlPassword, 0);

#notifier
yamlEdit(notifier, "data.DB_PWD", postgresqlPassword, 0);
yamlEdit(notifier, "data.BASE_URL", baseURL, 1);

#image-scanner
yamlEdit(imageScanner, "data.PG_PASSWORD", postgresqlPassword, 0);

#lens
yamlEdit(lens, "data.PG_PASSWORD", postgresqlPassword, 0);

#migrator
#delete migrator job
yamlEdit(migrator, "data.DB_PASSWORD", postgresqlPassword, 0);
migrator = kubectl apply -n devtroncd migrator;

#nats
natsOperator = kubectl apply -n devtroncd natsOperator;
natsServer = kubectl apply -n devtroncd natsServer;
natsStreaming = kubectl apply -n devtroncd natsStreaming;

#guard
certGen = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/generate_certificate.sh");
grumpyConfig = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/grumpy_config.txt", "/tmp/certs/grumpy_config.txt");
caConfig = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/ca_config.txt", "/tmp/certs/ca_config.txt");
certs = shellScript certGen;
crt = base64EncoderPrefix + "cat /tmp/certs/grumpy-crt.pem" + base64EncoderSuffix;
crt = shellScript crt;
key = base64EncoderPrefix + "cat /tmp/certs/grumpy-key.pem" + base64EncoderSuffix;
key = shellScript key;
yamlEdit(guard, `data.cert\.pem`, crt, 0);
yamlEdit(guard, `data.key\.pem`, key, 0);

#chartmuseum
yamlEdit(chartmuseum, "data.CHARTMUSEUM_STORAGE_AMAZON_BUCKET", chartmuseumStorageAmazonBucket, 1);
yamlEdit(chartmuseum, "data.CHARTMUSEUM_STORAGE_AMAZON_REGION", chartmuseumStorateAmazonRegion, 1);
chartmuseum = kubectl apply -n devtroncd chartmuseum;

# devtron
hasDevtron = kubectl get deployment "devtron" -n devtroncd;
orchToken = shellScript passwordGen;
webHookToken = shellScript passwordGen;
dexSecret = shellScript passwordGen;
dexJwtKey = shellScript passwordGen;
dexCStoreKey = shellScript passwordGen;
externalCIAPISecret = shellScript passwordGen;

grafanaUrl = "http://%s:%s@" + baseURL + "/grafana";
yamlEdit(devtron, "data.PG_PASSWORD", postgresqlPassword, 0);
yamlEdit(devtron, "data.GIT_TOKEN", gitToken, 0);

#fix this, as this will result in fields getting changed, if exists then we need to pull existing values and apply again

# populate acd password
allDevtroncdPo = kubectl get po -n devtroncd;
argocdPodNameSelector = `items.#(metadata.labels.app\.kubernetes\.io/name=="argocd-server").metadata.name`;
acdPassword = jsonSelect(allDevtroncdPo, argocdPodNameSelector);
acdPassword = base64EncoderPrefix + `echo "` + acdPassword + `" | tr -d ':\n' ` + base64EncoderSuffix;
acdPassword = shellScript acdPassword;

if hasDevtron {
	devtronSecret = kubectl get secret -n devtroncd devtron-secret;
	texternalCIAPISecret = jsonSelect(devtronSecret, "data.EXTERNAL_CI_API_SECRET");
	if texternalCIAPISecret {
		externalCIAPISecret = texternalCIAPISecret;
	}
	twebHookToken = jsonSelect(devtronSecret, "data.WEBHOOK_TOKEN");
	if twebHookToken {
		webHookToken = twebHookToken;
	}
	torchToken = jsonSelect(devtronSecret, "data.ORCH_TOKEN");
	if torchToken {
		orchToken = torchToken;
	}
	tdexSecret = jsonSelect(devtronSecret, "data.DEX_SECRET");
	if tdexSecret {
		dexSecret = tdexSecret;
	}
	tdexJwtKey = jsonSelect(devtronSecret, "data.DEX_JWTKEY");
	if tdexJwtKey {
		dexJwtKey = tdexJwtKey;
	}
	tdexCStoreKey = jsonSelect(devtronSecret, "data.DEX_CSTOREKEY");
	if tdexCStoreKey {
		dexCStoreKey = tdexCStoreKey;
	}
	tacdPassword = jsonSelect(devtronSecret, "data.ACD_PASSWORD");
	if tacdPassword {
		acdPassword = tacdPassword;
	}
}
if !hasDevtron {
	yamlEdit(devtron, "data.EXTERNAL_CI_API_SECRET", externalCIAPISecret, 0);
	yamlEdit(devtron, "data.WEBHOOK_TOKEN", webHookToken, 0);
	yamlEdit(devtron, "data.ORCH_TOKEN", orchToken, 0);
	yamlEdit(devtron, "data.DEX_SECRET", dexSecret, 0);
	yamlEdit(devtron, "data.DEX_JWTKEY", dexJwtKey, 0);
	yamlEdit(devtron, "data.DEX_CSTOREKEY", dexCStoreKey, 0);
	yamlEdit(devtron, "data.ACD_PASSWORD", acdPassword, 0);
}

yamlEdit(devtron, "data.EXTERNAL_CI_WEB_HOOK_URL", baseURL+"/orchestrator/webhook/ext-ci", 1);
yamlEdit(devtron, "data.GITLAB_NAMESPACE_ID", gitlabNamespaceId, 1);
yamlEdit(devtron, "data.GITLAB_NAMESPACE_NAME", gitlabNamespaceName, 1);
yamlEdit(devtron, "data.GIT_USERNAME", gitUserName, 1);
yamlEdit(devtron, "data.GITHUB_ORGANIZATION", githubOrganization, 1);
yamlEdit(devtron, "data.GIT_PROVIDER", gitProvider, 1);
yamlEdit(devtron, "data.DEFAULT_CD_LOGS_BUCKET_REGION", defaultCDLogsBucketRegion, 1);
yamlEdit(devtron, "data.DEFAULT_CACHE_BUCKET", defaultCacheBucket, 1);
yamlEdit(devtron, "data.DEFAULT_CACHE_BUCKET_REGION", defaultCacheBucketRegion, 1);
yamlEdit(devtron, "data.DEFAULT_BUILD_LOGS_BUCKET", defaultBuildLogsBucket, 1);
yamlEdit(devtron, "data.GRAFANA_URL", grafanaUrl, 1);
devtronOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/devtron.yaml");
devtron = kubectl apply -n devtroncd devtron -u devtronOverride;
devtronDexIngress = kubectl apply -n devtroncd devtronDexIngress;

guard = kubectl apply -n devtroncd guard;
dashboard = kubectl apply -n devtroncd dashboard;

gitSensorOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/gitsensor.yaml");
gitSensor = kubectl apply -n devtroncd gitSensor -u gitSensorOverride;
imageScannerOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/image-scanner.yaml");
imageScanner = kubectl apply -n devtroncd imageScanner -u imageScannerOverride;
kubewatch = kubectl apply -n devtroncd kubewatch;
lensOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/lens.yaml");
lens = kubectl apply -n devtroncd lens -u lensOverride;
notifierOverride = download("https://raw.githubusercontent.com/pghildiyal/devtron-installation-script/main/updates/notifier.yaml");
notifier = kubectl apply -n devtroncd notifier -u notifierOverride;

workflowConfig = `parallelism: 50
artifactRepository:
  archiveLogs: true
  s3:
    endpoint: s3.amazonaws.com
    bucket: `;
workflowConfig = workflowConfig + defaultBuildLogsBucket;
workflowConfig = workflowConfig + `
    region: `;
workflowConfig = workflowConfig + defaultCacheBucketRegion;
workflowConfig = workflowConfig + `
    keyFormat: devtron/{{workflow.name}}
containerRuntimeExecutor: pns
executor:
  imagePullPolicy: Always`;
yamlEdit(workflow, "data.config", workflowConfig, 10);
workflow = kubectl apply -n argo workflow;

postgresPlainPwd = base64DecoderPrefix + `echo "` + postgresqlPassword + `" | tr -d ':\n' ` + base64DecoderSuffix;
postgresPlainPwd = shellScript postgresPlainPwd;
clairPosrgresUrl = "postgres://postgres:"+ postgresPlainPwd +"@postgresql-postgresql.devtroncd:5432/clair?sslmode=disable";
yamlEdit(clairConfig, "clair.database.options.source", clairPosrgresUrl, 0);
clairEncodedConfig = base64EncoderPrefix + `echo "` + clairConfig + `"` + base64EncoderSuffix;
clairEncodedConfig = shellScript clairEncodedConfig;
yamlEdit(clair, `data.config\.yaml`, clairEncodedConfig, 0);
clair = kubectl apply -n devtroncd clair;