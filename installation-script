operatorSecret = kubectl get secret -n devtroncd devtron-operator-secret;
operatorConfigMap = kubectl get cm -n devtroncd devtron-operator-cm;
postgresqlPassword = jsonSelect(operatorSecret, "data.POSTGRESQL_PASSWORD");
acdPassword = jsonSelect(operatorSecret, "data.ACD_PASSWORD");
gitToken = jsonSelect(operatorSecret, "data.GIT_TOKEN");
webHookToken = jsonSelect(operatorSecret, "data.WEBHOOK_TOKEN");
grafanaPassword = jsonSelect(operatorSecret, "data.GRAFANA_PASSWORD");

baseURLScheme = jsonSelect(operatorConfigMap, "data.BASE_URL_SCHEME");
baseURL = jsonSelect(operatorConfigMap, "data.BASE_URL");
dexConfig = jsonSelect(operatorConfigMap, "data.DEX_CONFIG");
gitlabNamespaceId = jsonSelect(operatorConfigMap, "data.GITLAB_NAMESPACE_ID");
gitlabNamespaceName = jsonSelect(operatorConfigMap, "data.GITLAB_NAMESPACE_NAME");
gitUserName = jsonSelect(operatorConfigMap, "data.GIT_USERNAME");
githubOrganization = jsonSelect(operatorConfigMap, "data.GITHUB_ORGANIZATION");
gitProvider = jsonSelect(operatorConfigMap, "data.GIT_PROVIDER");
defaultCDLogsBucketRegion = jsonSelect(operatorConfigMap, "data.DEFAULT_CD_LOGS_BUCKET_REGION");
defaultCacheBucket = jsonSelect(operatorConfigMap, "data.DEFAULT_CACHE_BUCKET");
defaultCacheBucketRegion = jsonSelect(operatorConfigMap, "data.DEFAULT_CACHE_BUCKET_REGION");
defaultBuildLogsBucket = jsonSelect(operatorConfigMap, "data.DEFAULT_BUILD_LOGS_BUCKET");
chartmuseumStorageAmazonBucket = jsonSelect(operatorConfigMap, "data.CHARTMUSEUM_STORAGE_AMAZON_BUCKET");
chartmuseumStorageAmazonRegion = jsonSelect(operatorConfigMap, "data.CHARTMUSEUM_STORAGE_AMAZON_REGION");
externalSecretAmazonRegion = jsonSelect(operatorConfigMap, "data.EXTERNAL_SECRET_AMAZON_REGION");
prometheusUrl = jsonSelect(operatorConfigMap, "data.PROMETHEUS_URL");

passwordGen = `#!/bin/bash
openssl rand -base64 20 | base64 | tr -d ':\n' | tr -d '=' | base64 | tr -d ':\n'`;

shebang = `#!/bin/bash 
`;

base64EncoderPrefix = `#!/bin/bash 
`;
base64EncoderSuffix = ` | base64 | tr -d ':\n'`;

base64DecoderPrefix = `#!/bin/bash 
`;
base64DecoderSuffix = ` | base64 -d | tr -d ':\n'`;

if !postgresqlPassword {
	log("postgresql password is mandatory");
}
if !baseURL {
	log("baseURL is mandatory");
}
if !gitToken {
	log("gitToken is mandatory");
}


argocd = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/argocd.yaml");
chartmuseum = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/chartmuseum.yaml");
clair = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/clair.yaml");
clairConfig = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/clair-config.yaml");
dashboard = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/dashboard.yaml");
gitSensor = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/gitsensor.yaml");
guard = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/guard.yaml");
postgresql = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/postgresql.yaml");
imageScanner = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/image-scanner.yaml");
kubewatch = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/kubewatch.yaml");
lens = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/lens.yaml");
migrator = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/migrator.yaml");
natsOperator = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/nats-operator.yaml");
natsServer = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/nats-server.yaml");
natsStreaming = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/nats-streaming.yaml");
notifier = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/notifier.yaml");
devtron = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/devtron.yaml");
devtronDexIngress = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/devtron-dex-ingress.yaml");
workflow = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/workflow.yaml");
serviceAccount = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/serviceaccount.yaml");
namespace = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/namespace.yaml");
externalSecret = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/external-secret.yaml");
grafana = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/grafana.yaml");
rollout = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/yamls/rollout.yaml");


postgresqlOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/postgresql.yaml");
argocdOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/argocd.yaml");
devtronOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/devtron.yaml");
gitSensorOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/gitsensor.yaml");
imageScannerOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/image-scanner.yaml");
lensOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/lens.yaml");
notifierOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/notifier.yaml");
chartmuseumOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/chartmuseum.yaml");
clairOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/clair.yaml");
dashboardOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/dashboard.yaml");
guardOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/guard.yaml");
kubewatchOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/kubewatch.yaml");
migratorOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/migrator.yaml");
natsOperatorOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/nats-operator.yaml");
natsServerOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/nats-server.yaml");
natsStreamingOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/nats-streaming.yaml");
devtronDexIngressOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/updates/yamls/devtron-dex-ingress.yaml");
workflowOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/workflow.yaml");
externalSecretOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/external-secret.yaml");
grafanaOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/grafana.yaml");
rolloutOverride = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/updates/rollout.yaml");

#grafana
grafanaSecret = kubectl get -n devtroncd secret devtron-grafana-cred-secret;
hasgrafana = kubectl get -n devtroncd deployment devtron-grafana;
grafanaPassword = jsonSelect(grafanaSecret, "data.admin-password");
if !grafanaPassword {
    log ("not found");
	grafanaPassword = shellScript passwordGen;
}
grafanaPasswordPlain = base64DecoderPrefix + `echo "` + grafanaPassword + `" | tr -d ':\n' ` + base64DecoderSuffix;
grafanaPasswordPlain = shellScript grafanaPasswordPlain;
yamlEdit(grafana, "data.admin-password", grafanaPassword, 0);
grafanaUrl = baseURLScheme + "://%s:%s@" + baseURL + "/grafana";
grafanaUrlWithPwd = baseURLScheme + "://admin:"+ grafanaPasswordPlain + "@" + baseURL + "/grafana";

grafanaIni = `[analytics]
check_for_updates = true
[auth.anonymous]
enabled = true
org_name = devtron-metrics-view
org_role = Viewer
[grafana_net]
url = https://grafana.net
[log]
mode = console
[paths]
data = /var/lib/grafana/data
logs = /var/log/grafana
plugins = /var/lib/grafana/plugins
provisioning = /etc/grafana/provisioning
[security]
allow_embedding = true
[server]
root_url = ` + baseURLScheme + "://" + baseURL + `/grafana
serve_from_sub_path = true
[users]
allow_org_create = true
 `;
yamlEdit(grafana, `data.grafana\.ini`, grafanaIni, 6);
grafana = kubectl apply -n devtroncd grafana -u grafanaOverride;
log("setup grafana");

if !hasgrafana {
	createOrgScript = shebang + `
	sleep 50
	ORG_ID=$( curl -d '{"name":"devtron-metrics-view"}' -H "Content-Type: application/json" -X POST '` + grafanaUrlWithPwd + `/api/orgs' )
	echo $ORG_ID
	`;
	createOrg = shellScript createOrgScript;
	log("created org " + createOrg);

	orgId = jsonSelect(createOrg, "orgId");
	if !orgId {
		orgId = "2";
	}

	activeOrgScript = shebang + `
	curl -X POST '` + grafanaUrlWithPwd + `/api/user/using/` + orgId +`'`;
	activeOrg = shellScript activeOrgScript;
	log("activated org");

	setPreferenceScript = shebang + `
	curl -X PUT -H "Content-Type: application/json" -d '{"homeDashboardId":0,"theme":"light","timezone":"browser"}' '`+ grafanaUrlWithPwd + `/api/org/preferences'`;
	setPreference = shellScript setPreferenceScript;
	log("set preference");

	prometheusDatasourceScript = shebang + `
	curl '` + grafanaUrlWithPwd + `/api/datasources' \
	-H 'content-type: application/json' \
	-H 'x-grafana-org-id: ` + orgId + `' \
	--data-raw '{"name":"Prometheus-devtron","type":"prometheus","access":"proxy","isDefault":true}'
	`;
	prometheusDatasource = shellScript prometheusDatasourceScript;
	log("data source setup step 1");

	datasourceId = jsonSelect(prometheusDatasource, "datasource.id");
	log("datasource id " + datasourceId);

	prometheusDatasourceScriptUpdate = shebang + `
	curl '` + grafanaUrlWithPwd + `/api/datasources/` + datasourceId + `' -X PUT \
	-H 'content-type: application/json' \
	-H 'x-grafana-org-id: ` + orgId + `' \
	--data-raw '{"id":` + datasourceId +` ,
	"orgId":` + orgId + `,
	"name":"Prometheus-devtron","type":"prometheus","access":"proxy",
	"url":"` + prometheusUrl + `",
	"basicAuth":true,"jsonData":{},"version":1}'
	`;
	prometheusDatasourceUpdate = shellScript prometheusDatasourceScriptUpdate;
	log("data source setup step 2");

	grafanaDashboardProvider = `
	apiVersion: 1
	providers:
	- disableDeletion: true
	  editable: false
	  folder: ""
	  name: devtron-provider
	  options:
	    path: /var/lib/grafana/dashboards/devtron-provider
	  orgId: `+ orgId + `
	  type: file
	 `;

	grafanaCm = kubectl get -n devtroncd cm devtron-grafana;
	jsonEdit(grafanaCm, `data.dashboardproviders\.yaml`, grafanaDashboardProvider);
	grafanaCm = kubectl apply -n devtroncd grafanaCm;
	log("setup up grafana cm with provider yaml");

	allDevtroncdPo = kubectl get po -n devtroncd;
	grafanaPodnamePattern = `items.#(metadata.name%"devtron-grafana*").metadata.name`;
	grafanaPodname = jsonSelect(allDevtroncdPo, grafanaPodnamePattern);
	grafanaPoddelete = kubectl delete -n devtroncd po grafanaPodname;
	log("deleted grafana pod to reload configmap");
}

namespaces = kubectl apply namespace;
log("created namespaces");
sa = kubectl apply serviceAccount;
log("created service account");

#externalSecret
externalSecretAmazonRegion = base64EncoderPrefix + `echo "` + externalSecretAmazonRegion + `" | tr -d ':\n' ` + base64EncoderSuffix;
externalSecretAmazonRegion = shellScript externalSecretAmazonRegion;
yamlEdit(externalSecret, "data.AWS_REGION", externalSecretAmazonRegion, 1);
externalSecret = kubectl apply -n devtroncd externalSecret -u externalSecretOverride;
log("created external secret");

#postgresql
# if postgres already installed skip installation
hasPostgresql = kubectl get sts postgresql-postgresql -n devtroncd;
if !hasPostgresql {
	yamlEdit(postgresql, "data.postgresql-password", postgresqlPassword, 0);
	postgresql = kubectl apply -n devtroncd postgresql -u postgresqlOverride;
	log("created postgresql");
}
#argocd
hasArgocd = kubectl get deployment argocd-server -n devtroncd;

helmRepo = `- name: incubator
  url: https://kubernetes-charts-incubator.storage.googleapis.com
- name: devtron-charts
  url: https://devtron-charts.s3.us-east-2.amazonaws.com/charts`;

yamlEdit(argocd, `data.helm\.repositories`, helmRepo, 15);
yamlEdit(argocd, "data.url", baseURLScheme + "://" + baseURL, 15);
yamlEdit(argocd, `data.dex\.config`, dexConfig, 15);
# patchLoad = '{"data":{"url":"' + baseURL + '", "dex.config:"' + dexConfig + '}}';
# pa = kubectl patch -n devtroncd cm/argocd-cm --type "application/merge-patch+json" -p patchLoad;

yamlEdit(argocd, `subjects.0.namespace`, "devtroncd", 14);
yamlEdit(argocd, `subjects.0.namespace`, "devtroncd", 13);
argocd = kubectl apply -n devtroncd argocd -u argocdOverride;
#patchLoad = '{"data":{"url":"' + baseURL + '", "dex.config:"' + dexConfig + '}}';
#pa = kubectl patch -n devtroncd cm/argocd-cm --type "application/merge-patch+json" -p patchLoad;
log("executed argocd setup command");

#rollout
rollout = kubectl apply -n devtroncd rollout -u rolloutOverride;
log("executed rollout setup command");

#git-sensor
yamlEdit(gitSensor, "data.PG_PASSWORD", postgresqlPassword, 0);


#notifier
yamlEdit(notifier, "data.DB_PWD", postgresqlPassword, 0);
yamlEdit(notifier, "data.BASE_URL", baseURLScheme + "://" + baseURL, 1);

#image-scanner
yamlEdit(imageScanner, "data.PG_PASSWORD", postgresqlPassword, 0);

#lens
yamlEdit(lens, "data.PG_PASSWORD", postgresqlPassword, 0);

#migrator
#delete migrator job
yamlEdit(migrator, "data.DB_PASSWORD", postgresqlPassword, 0);
migrator = kubectl apply -n devtroncd migrator -u migratorOverride;
log("executed migrator setup command");

#nats
natsOperator = kubectl apply -n devtroncd natsOperator -u natsOperatorOverride;
log("executed nats operator setup");
natsServer = kubectl apply -n devtroncd natsServer -u natsServerOverride;
log("executed nats server setup");
natsStreaming = kubectl apply -n devtroncd natsStreaming -u natsStreamingOverride;
log("executed nats streaming setup");

#guard
makeCertsDir = `#!/bin/bash
mkdir -p /tmp/certs`;
makeCertsDir = shellScript makeCertsDir;
certGen = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/generate_certificate.sh");
grumpyConfig = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/grumpy_config.txt", "/tmp/certs/grumpy_config.txt");
caConfig = download("https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/main/ca_config.txt", "/tmp/certs/ca_config.txt");
certs = shellScript certGen;
crt = base64EncoderPrefix + "cat /tmp/certs/grumpy-crt.pem" + base64EncoderSuffix;
crt = shellScript crt;
key = base64EncoderPrefix + "cat /tmp/certs/grumpy-key.pem" + base64EncoderSuffix;
key = shellScript key;
cacrt = base64EncoderPrefix + "cat /tmp/certs/ca.crt" + base64EncoderSuffix;
cacrt = shellScript cacrt;
yamlEdit(guard, `data.cert\.pem`, crt, 0);
yamlEdit(guard, `data.key\.pem`, key, 0);
yamlEdit(guard, "webhooks.0.clientConfig.caBundle", cacrt, 4);

#chartmuseum
yamlEdit(chartmuseum, "data.CHARTMUSEUM_STORAGE_AMAZON_BUCKET", chartmuseumStorageAmazonBucket, 1);
yamlEdit(chartmuseum, "data.CHARTMUSEUM_STORAGE_AMAZON_REGION", chartmuseumStorageAmazonRegion, 1);
chartmuseum = kubectl apply -n devtroncd chartmuseum -u chartmuseumOverride;
log("executed chartmuseum setup");

# devtron
hasDevtron = kubectl get deployment "devtron" -n devtroncd;
orchToken = shellScript passwordGen;
webHookToken = shellScript passwordGen;
dexSecret = shellScript passwordGen;
dexJwtKey = shellScript passwordGen;
dexCStoreKey = shellScript passwordGen;
externalCIAPISecret = shellScript passwordGen;

yamlEdit(devtron, "data.PG_PASSWORD", postgresqlPassword, 0);
yamlEdit(devtron, "data.GIT_TOKEN", gitToken, 0);

#fix this, as this will result in fields getting changed, if exists then we need to pull existing values and apply again

# populate acd password
allDevtroncdPo = kubectl get po -n devtroncd;
argocdPodNameSelector = `items.#(metadata.labels.app\.kubernetes\.io/name=="argocd-server").metadata.name`;
acdPassword = jsonSelect(allDevtroncdPo, argocdPodNameSelector);
acdPassword = base64EncoderPrefix + `echo "` + acdPassword + `" | tr -d ':\n' ` + base64EncoderSuffix;
acdPassword = shellScript acdPassword;

if hasDevtron {
	devtronSecret = kubectl get secret -n devtroncd devtron-secret;
	texternalCIAPISecret = jsonSelect(devtronSecret, "data.EXTERNAL_CI_API_SECRET");
	if texternalCIAPISecret {
		externalCIAPISecret = texternalCIAPISecret;
	}
	twebHookToken = jsonSelect(devtronSecret, "data.WEBHOOK_TOKEN");
	if twebHookToken {
		webHookToken = twebHookToken;
	}
	torchToken = jsonSelect(devtronSecret, "data.ORCH_TOKEN");
	if torchToken {
		orchToken = torchToken;
	}
	tdexSecret = jsonSelect(devtronSecret, "data.DEX_SECRET");
	if tdexSecret {
		dexSecret = tdexSecret;
	}
	tdexJwtKey = jsonSelect(devtronSecret, "data.DEX_JWTKEY");
	if tdexJwtKey {
		dexJwtKey = tdexJwtKey;
	}
	tdexCStoreKey = jsonSelect(devtronSecret, "data.DEX_CSTOREKEY");
	if tdexCStoreKey {
		dexCStoreKey = tdexCStoreKey;
	}
	tacdPassword = jsonSelect(devtronSecret, "data.ACD_PASSWORD");
	if tacdPassword {
		acdPassword = tacdPassword;
	}
}


yamlEdit(devtron, "data.EXTERNAL_CI_API_SECRET", externalCIAPISecret, 0);
yamlEdit(devtron, "data.WEBHOOK_TOKEN", webHookToken, 0);
yamlEdit(devtron, "data.ORCH_TOKEN", orchToken, 0);
yamlEdit(devtron, "data.DEX_SECRET", dexSecret, 0);
yamlEdit(devtron, "data.DEX_JWTKEY", dexJwtKey, 0);
yamlEdit(devtron, "data.DEX_CSTOREKEY", dexCStoreKey, 0);
yamlEdit(devtron, "data.ACD_PASSWORD", acdPassword, 0);


yamlEdit(devtron, "data.EXTERNAL_CI_WEB_HOOK_URL", baseURLScheme + "://" + baseURL+"/orchestrator/webhook/ext-ci", 1);
yamlEdit(devtron, "data.GITLAB_NAMESPACE_ID", gitlabNamespaceId, 1);
yamlEdit(devtron, "data.GITLAB_NAMESPACE_NAME", gitlabNamespaceName, 1);
yamlEdit(devtron, "data.GIT_USERNAME", gitUserName, 1);
yamlEdit(devtron, "data.GITHUB_ORGANIZATION", githubOrganization, 1);
yamlEdit(devtron, "data.GIT_PROVIDER", gitProvider, 1);
yamlEdit(devtron, "data.DEFAULT_CD_LOGS_BUCKET_REGION", defaultCDLogsBucketRegion, 1);
yamlEdit(devtron, "data.DEFAULT_CACHE_BUCKET", defaultCacheBucket, 1);
yamlEdit(devtron, "data.DEFAULT_CACHE_BUCKET_REGION", defaultCacheBucketRegion, 1);
yamlEdit(devtron, "data.DEFAULT_BUILD_LOGS_BUCKET", defaultBuildLogsBucket, 1);
yamlEdit(devtron, "data.GRAFANA_URL", grafanaUrl, 1);

externaSecretRegion = `env:
  AWS_REGION: ` + externalSecretAmazonRegion;

yamlEdit(devtron, `data.dt-k8s-external-secret\.yaml`, externaSecretRegion, 2);

devtron = kubectl apply -n devtroncd devtron -u devtronOverride;
log("executed devtron setup");
devtronDexIngress = kubectl apply -n devtroncd devtronDexIngress -u devtronDexIngressOverride;
log("executed devtron ingress setup");
guard = kubectl apply -n devtroncd guard -u guardOverride;
log("executed guard setup");
dashboard = kubectl apply -n devtroncd dashboard -u dashboardOverride;
log("executed dashboard setup");
gitSensor = kubectl apply -n devtroncd gitSensor -u gitSensorOverride;
log("executed git sensor setup");
imageScanner = kubectl apply -n devtroncd imageScanner -u imageScannerOverride;
log("executed image scanner setup");
kubewatch = kubectl apply -n devtroncd kubewatch -u kubewatchOverride;
llog("executed kubewatch setup");
lens = kubectl apply -n devtroncd lens -u lensOverride;
log("executed lens setup");
notifier = kubectl apply -n devtroncd notifier -u notifierOverride;
log("executed notifier setup");

workflowConfig = `parallelism: 50
artifactRepository:
  archiveLogs: true
  s3:
    endpoint: s3.amazonaws.com
    bucket: `;
workflowConfig = workflowConfig + defaultBuildLogsBucket;
workflowConfig = workflowConfig + `
    region: `;
workflowConfig = workflowConfig + defaultCacheBucketRegion;
workflowConfig = workflowConfig + `
    keyFormat: devtron/{{workflow.name}}
containerRuntimeExecutor: pns
executor:
  imagePullPolicy: Always`;
yamlEdit(workflow, "data.config", workflowConfig, 10);
workflow = kubectl apply -n argo workflow -u workflowOverride;
log("executed workflow setup");
postgresPlainPwd = base64DecoderPrefix + `echo "` + postgresqlPassword + `" | tr -d ':\n' ` + base64DecoderSuffix;
postgresPlainPwd = shellScript postgresPlainPwd;
clairPosrgresUrl = "postgres://postgres:"+ postgresPlainPwd +"@postgresql-postgresql.devtroncd:5432/clair?sslmode=disable";
yamlEdit(clairConfig, "clair.database.options.source", clairPosrgresUrl, 0);
clairEncodedConfig = base64EncoderPrefix + `echo "` + clairConfig + `"` + base64EncoderSuffix;
clairEncodedConfig = shellScript clairEncodedConfig;
yamlEdit(clair, `data.config\.yaml`, clairEncodedConfig, 0);
clair = kubectl apply -n devtroncd clair -u clairOverride;
log("executed clair setup");