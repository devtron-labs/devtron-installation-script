grafana_raw = "https://raw.githubusercontent.com/devtron-labs/devtron-installation-script/grafana-test/yamls/grafana-pras.yaml"
grafana = download(grafana_raw);
grafanaOverride = "";

passwordGen = `#!/bin/bash
openssl rand -base64 20 | base64 | tr -d ':\n' | tr -d '=' | base64 | tr -d ':\n'`;

shebang = `#!/bin/bash 
`;
sleep50 = shebang + `
sleep 50`;

base64EncoderPrefix = `#!/bin/bash 
`;
base64EncoderSuffix = ` | base64 | tr -d ':\n'`;

base64DecoderPrefix = `#!/bin/bash 
`;
base64DecoderSuffix = ` | base64 -d | tr -d ':\n'`;

#grafana
grafanaSecret = kubectl get -n pras secret devtron-grafana-cred-secret;
hasgrafana = kubectl get -n pras deployment devtron-grafana;
grafanaPassword = jsonSelect(grafanaSecret, "data.admin-password");
if !grafanaPassword {
    log ("not found");
	grafanaPassword = shellScript passwordGen;
}
grafanaPasswordPlain = base64DecoderPrefix + `echo "` + grafanaPassword + `" | tr -d ':\n' ` + base64DecoderSuffix;
grafanaPasswordPlain = shellScript grafanaPasswordPlain;
kubeYamlEdit(grafana, "data.admin-password", grafanaPassword, `/Secret//devtron-grafana-cred-secret`);
grafanaUrl = "http://%s:%s@devtron-grafana.pras/grafana";
grafanaUrlWithPwd = "http://admin:"+ grafanaPasswordPlain + "@devtron-grafana.pras/grafana";

grafanaIni = `[analytics]
check_for_updates = true
[auth.anonymous]
enabled = true
org_name = devtron-metrics-view
org_role = Viewer
[grafana_net]
url = https://grafana.net
[log]
mode = console
[paths]
data = /var/lib/grafana/data
logs = /var/log/grafana
plugins = /var/lib/grafana/plugins
provisioning = /etc/grafana/provisioning
[security]
allow_embedding = true
[server]
root_url = /grafana
serve_from_sub_path = true
[users]
allow_org_create = true
 `;
kubeYamlEdit(grafana, `data.grafana\.ini`, grafanaIni, `/ConfigMap/pras/devtron-grafana`);
grafana = kubectl apply -n pras grafana -u grafanaOverride;
log("setup grafana");

if !hasgrafana {
	createOrgScript = shebang + `
	sleep 50
	ORG_ID=$( curl -d '{"name":"devtron-metrics-view"}' -H "Content-Type: application/json" -X POST '` + grafanaUrlWithPwd + `/api/orgs' )
	echo $ORG_ID
	`;
	createOrg = shellScript createOrgScript;
	log("created org " + createOrg);

	orgId = jsonSelect(createOrg, "orgId");
	if !orgId {
		orgId = "2";
	}

	activeOrgScript = shebang + `
	curl -X POST '` + grafanaUrlWithPwd + `/api/user/using/` + orgId +`'`;
	activeOrg = shellScript activeOrgScript;
	log("activated org");

	setPreferenceScript = shebang + `
	curl -X PUT -H "Content-Type: application/json" -d '{"homeDashboardId":0,"theme":"light","timezone":"browser"}' '`+ grafanaUrlWithPwd + `/api/org/preferences'`;
	setPreference = shellScript setPreferenceScript;
	log("set preference");

	prometheusDatasourceScript = shebang + `
	curl '` + grafanaUrlWithPwd + `/api/datasources' \
	-H 'content-type: application/json' \
	-H 'x-grafana-org-id: ` + orgId + `' \
	--data-raw '{"name":"Prometheus-devtron","type":"prometheus","access":"proxy","isDefault":true}'
	`;
	prometheusDatasource = shellScript prometheusDatasourceScript;
	log("data source setup step 1");

	datasourceId = jsonSelect(prometheusDatasource, "datasource.id");
	log("datasource id " + datasourceId);

	prometheusDatasourceScriptUpdate = shebang + `
	curl '` + grafanaUrlWithPwd + `/api/datasources/` + datasourceId + `' -X PUT \
	-H 'content-type: application/json' \
	-H 'x-grafana-org-id: ` + orgId + `' \
	--data-raw '{"id":` + datasourceId +` ,
	"orgId":` + orgId + `,
	"name":"Prometheus-devtron","type":"prometheus","access":"proxy",
	"url":"` + prometheusUrl + `",
	"basicAuth":true,"jsonData":{},"version":1}'
	`;
	prometheusDatasourceUpdate = shellScript prometheusDatasourceScriptUpdate;
	log("data source setup step 2");

	grafanaDashboardProvider = `
apiVersion: 1
providers:
- disableDeletion: true
  editable: false
  folder: ""
  name: devtron-provider
  options:
    path: /var/lib/grafana/dashboards/devtron-provider
  orgId: `+ orgId + `
  type: file
 `;

	grafanaCm = kubectl get -n pras cm devtron-grafana;
	jsonEdit(grafanaCm, `data.dashboardproviders\.yaml`, grafanaDashboardProvider);
	grafanaCm = kubectl apply -n pras grafanaCm;
	log("setup up grafana cm with provider yaml");

	allDevtroncdPo = kubectl get po -n pras;
	grafanaPodnamePattern = `items.#(metadata.name%"devtron-grafana*").metadata.name`;
	grafanaPodname = jsonSelect(allDevtroncdPo, grafanaPodnamePattern);
	grafanaPoddelete = kubectl delete -n pras po grafanaPodname;
	log("deleted grafana pod to reload configmap");
}
